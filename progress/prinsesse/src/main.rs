fn read_vec<T: std::str::FromStr, B: std::io::BufRead>(bufreader: &mut B) -> Vec<T>
where
    T::Err: std::fmt::Debug,
{
    let mut line = String::new();
    bufreader.read_line(&mut line).unwrap();
    line.split_whitespace()
        .map(|tok| tok.parse::<T>().expect("Failed to parse input"))
        .collect()
}

fn read_one<T: std::str::FromStr, B: std::io::BufRead>(bufreader: &mut B) -> T
where
    T::Err: std::fmt::Debug,
{
    let mut line = String::new();
    bufreader.read_line(&mut line).unwrap();
    line.trim().parse::<T>().unwrap()
}

const SPLIT_LUT: [f32; 1001] = [
    0.5f32,
    0.38196602f32,
    0.3176722f32,
    0.27550805f32,
    0.24512233f32,
    0.2219104f32,
    0.20345564f32,
    0.18834768f32,
    0.17569944f32,
    0.16492096f32,
    0.15560247f32,
    0.14744928f32,
    0.14024332f32,
    0.13381933f32,
    0.12804946f32,
    0.12283313f32,
    0.11808995f32,
    0.11375483f32,
    0.10977443f32,
    0.10610459f32,
    0.10270838f32,
    0.09955467f32,
    0.09661703f32,
    0.093872815f32,
    0.09130254f32,
    0.088889316f32,
    0.086618446f32,
    0.084477045f32,
    0.08245378f32,
    0.08053865f32,
    0.078722775f32,
    0.07699825f32,
    0.075357996f32,
    0.0737957f32,
    0.072305635f32,
    0.07088268f32,
    0.06952216f32,
    0.06821987f32,
    0.066971965f32,
    0.06577494f32,
    0.064625606f32,
    0.06352102f32,
    0.0624585f32,
    0.061435573f32,
    0.060449965f32,
    0.059499573f32,
    0.058582455f32,
    0.057696808f32,
    0.056840967f32,
    0.056013387f32,
    0.055212617f32,
    0.05443732f32,
    0.053686246f32,
    0.052958224f32,
    0.05225216f32,
    0.051567025f32,
    0.050901867f32,
    0.050255787f32,
    0.04962793f32,
    0.04901751f32,
    0.04842377f32,
    0.047846016f32,
    0.04728357f32,
    0.046735812f32,
    0.046202146f32,
    0.045682013f32,
    0.04517488f32,
    0.044680245f32,
    0.044197634f32,
    0.04372659f32,
    0.043266688f32,
    0.042817514f32,
    0.04237869f32,
    0.041949842f32,
    0.041530617f32,
    0.041120682f32,
    0.04071972f32,
    0.040327426f32,
    0.03994351f32,
    0.039567694f32,
    0.039199717f32,
    0.03883932f32,
    0.03848627f32,
    0.038140323f32,
    0.037801266f32,
    0.037468888f32,
    0.03714298f32,
    0.036823347f32,
    0.03650981f32,
    0.036202177f32,
    0.035900284f32,
    0.035603963f32,
    0.035313055f32,
    0.035027407f32,
    0.03474687f32,
    0.034471307f32,
    0.034200575f32,
    0.03393455f32,
    0.033673096f32,
    0.0334161f32,
    0.03316344f32,
    0.032915004f32,
    0.03267068f32,
    0.032430366f32,
    0.032193962f32,
    0.031961363f32,
    0.031732477f32,
    0.031507216f32,
    0.031285487f32,
    0.031067204f32,
    0.030852286f32,
    0.03064065f32,
    0.030432222f32,
    0.030226924f32,
    0.030024685f32,
    0.029825432f32,
    0.0296291f32,
    0.02943562f32,
    0.029244928f32,
    0.029056963f32,
    0.028871663f32,
    0.028688973f32,
    0.02850883f32,
    0.028331187f32,
    0.028155982f32,
    0.02798317f32,
    0.027812695f32,
    0.027644511f32,
    0.027478572f32,
    0.027314827f32,
    0.027153235f32,
    0.02699375f32,
    0.026836328f32,
    0.026680933f32,
    0.02652752f32,
    0.02637605f32,
    0.026226487f32,
    0.026078794f32,
    0.025932932f32,
    0.025788868f32,
    0.025646567f32,
    0.025505997f32,
    0.025367122f32,
    0.025229914f32,
    0.02509434f32,
    0.02496037f32,
    0.024827976f32,
    0.024697129f32,
    0.024567798f32,
    0.024439959f32,
    0.024313584f32,
    0.024188649f32,
    0.024065126f32,
    0.02394299f32,
    0.02382222f32,
    0.023702791f32,
    0.023584679f32,
    0.023467861f32,
    0.023352316f32,
    0.023238024f32,
    0.023124961f32,
    0.02301311f32,
    0.022902448f32,
    0.022792956f32,
    0.022684615f32,
    0.022577407f32,
    0.022471312f32,
    0.022366315f32,
    0.022262394f32,
    0.022159537f32,
    0.022057725f32,
    0.02195694f32,
    0.021857169f32,
    0.021758392f32,
    0.021660596f32,
    0.021563768f32,
    0.02146789f32,
    0.02137295f32,
    0.02127893f32,
    0.02118582f32,
    0.021093607f32,
    0.021002274f32,
    0.020911809f32,
    0.0208222f32,
    0.020733437f32,
    0.020645503f32,
    0.020558389f32,
    0.020472081f32,
    0.02038657f32,
    0.020301841f32,
    0.020217886f32,
    0.020134695f32,
    0.020052254f32,
    0.019970555f32,
    0.019889586f32,
    0.019809337f32,
    0.0197298f32,
    0.019650962f32,
    0.019572819f32,
    0.019495355f32,
    0.019418564f32,
    0.019342437f32,
    0.019266965f32,
    0.019192139f32,
    0.01911795f32,
    0.019044392f32,
    0.018971452f32,
    0.018899126f32,
    0.018827407f32,
    0.018756282f32,
    0.018685747f32,
    0.018615795f32,
    0.018546415f32,
    0.018477604f32,
    0.018409353f32,
    0.018341653f32,
    0.018274501f32,
    0.018207887f32,
    0.018141804f32,
    0.018076248f32,
    0.018011212f32,
    0.017946688f32,
    0.017882671f32,
    0.017819155f32,
    0.017756132f32,
    0.017693598f32,
    0.017631548f32,
    0.017569974f32,
    0.01750887f32,
    0.017448233f32,
    0.017388055f32,
    0.017328333f32,
    0.01726906f32,
    0.01721023f32,
    0.01715184f32,
    0.017093884f32,
    0.017036358f32,
    0.016979255f32,
    0.01692257f32,
    0.0168663f32,
    0.016810441f32,
    0.016754987f32,
    0.016699933f32,
    0.016645275f32,
    0.016591009f32,
    0.01653713f32,
    0.016483635f32,
    0.016430518f32,
    0.016377775f32,
    0.016325403f32,
    0.016273398f32,
    0.016221756f32,
    0.016170474f32,
    0.016119543f32,
    0.016068967f32,
    0.016018735f32,
    0.01596885f32,
    0.015919302f32,
    0.015870092f32,
    0.015821215f32,
    0.015772667f32,
    0.015724445f32,
    0.015676545f32,
    0.015628964f32,
    0.0155817f32,
    0.015534747f32,
    0.015488106f32,
    0.01544177f32,
    0.015395737f32,
    0.015350005f32,
    0.015304569f32,
    0.015259427f32,
    0.015214577f32,
    0.015170015f32,
    0.015125738f32,
    0.015081745f32,
    0.015038031f32,
    0.014994594f32,
    0.014951431f32,
    0.01490854f32,
    0.014865918f32,
    0.014823562f32,
    0.01478147f32,
    0.01473964f32,
    0.014698069f32,
    0.014656752f32,
    0.014615691f32,
    0.014574881f32,
    0.01453432f32,
    0.014494006f32,
    0.014453935f32,
    0.014414107f32,
    0.014374519f32,
    0.0143351685f32,
    0.014296053f32,
    0.014257171f32,
    0.01421852f32,
    0.014180099f32,
    0.014141903f32,
    0.014103933f32,
    0.014066185f32,
    0.014028658f32,
    0.01399135f32,
    0.0139542585f32,
    0.013917382f32,
    0.0138807185f32,
    0.013844266f32,
    0.013808021f32,
    0.013771985f32,
    0.013736154f32,
    0.013700526f32,
    0.013665101f32,
    0.013629874f32,
    0.013594847f32,
    0.013560017f32,
    0.01352538f32,
    0.013490938f32,
    0.013456686f32,
    0.013422624f32,
    0.013388751f32,
    0.013355064f32,
    0.013321563f32,
    0.013288245f32,
    0.013255108f32,
    0.013222152f32,
    0.013189375f32,
    0.013156775f32,
    0.013124352f32,
    0.0130921025f32,
    0.013060026f32,
    0.013028121f32,
    0.012996386f32,
    0.01296482f32,
    0.012933421f32,
    0.012902188f32,
    0.01287112f32,
    0.012840215f32,
    0.012809471f32,
    0.012778888f32,
    0.012748466f32,
    0.012718201f32,
    0.012688092f32,
    0.012658139f32,
    0.01262834f32,
    0.012598694f32,
    0.0125692f32,
    0.012539857f32,
    0.012510663f32,
    0.012481618f32,
    0.012452719f32,
    0.012423966f32,
    0.012395359f32,
    0.012366894f32,
    0.012338572f32,
    0.012310392f32,
    0.012282353f32,
    0.012254451f32,
    0.01222669f32,
    0.012199065f32,
    0.012171575f32,
    0.012144221f32,
    0.012117001f32,
    0.012089914f32,
    0.012062959f32,
    0.012036135f32,
    0.012009441f32,
    0.011982876f32,
    0.011956439f32,
    0.0119301295f32,
    0.011903946f32,
    0.011877888f32,
    0.011851954f32,
    0.011826144f32,
    0.011800456f32,
    0.011774889f32,
    0.011749444f32,
    0.011724118f32,
    0.011698912f32,
    0.011673823f32,
    0.011648851f32,
    0.011623996f32,
    0.011599257f32,
    0.0115746325f32,
    0.011550121f32,
    0.011525723f32,
    0.011501438f32,
    0.011477264f32,
    0.011453201f32,
    0.011429247f32,
    0.011405404f32,
    0.011381667f32,
    0.011358039f32,
    0.011334518f32,
    0.011311103f32,
    0.011287793f32,
    0.011264588f32,
    0.011241486f32,
    0.011218488f32,
    0.011195593f32,
    0.011172798f32,
    0.011150106f32,
    0.011127513f32,
    0.0111050205f32,
    0.011082627f32,
    0.011060331f32,
    0.011038134f32,
    0.011016033f32,
    0.010994028f32,
    0.01097212f32,
    0.010950306f32,
    0.010928587f32,
    0.010906962f32,
    0.01088543f32,
    0.01086399f32,
    0.010842642f32,
    0.010821385f32,
    0.01080022f32,
    0.010779144f32,
    0.010758159f32,
    0.010737262f32,
    0.010716453f32,
    0.010695732f32,
    0.010675098f32,
    0.010654551f32,
    0.01063409f32,
    0.010613714f32,
    0.010593425f32,
    0.010573219f32,
    0.010553096f32,
    0.010533057f32,
    0.010513101f32,
    0.010493227f32,
    0.010473436f32,
    0.010453724f32,
    0.010434095f32,
    0.0104145445f32,
    0.010395075f32,
    0.010375684f32,
    0.010356371f32,
    0.010337138f32,
    0.010317981f32,
    0.010298902f32,
    0.0102799f32,
    0.010260974f32,
    0.010242124f32,
    0.010223349f32,
    0.0102046495f32,
    0.010186024f32,
    0.010167472f32,
    0.010148994f32,
    0.010130589f32,
    0.010112256f32,
    0.010093996f32,
    0.010075808f32,
    0.01005769f32,
    0.010039643f32,
    0.010021668f32,
    0.010003761f32,
    0.009985926f32,
    0.009968158f32,
    0.00995046f32,
    0.009932829f32,
    0.009915267f32,
    0.009897772f32,
    0.009880344f32,
    0.009862984f32,
    0.009845689f32,
    0.00982846f32,
    0.009811298f32,
    0.0097942f32,
    0.009777167f32,
    0.009760198f32,
    0.009743294f32,
    0.009726453f32,
    0.009709675f32,
    0.00969296f32,
    0.009676307f32,
    0.009659718f32,
    0.00964319f32,
    0.009626723f32,
    0.009610317f32,
    0.009593972f32,
    0.009577688f32,
    0.009561463f32,
    0.009545299f32,
    0.009529194f32,
    0.009513148f32,
    0.00949716f32,
    0.009481232f32,
    0.00946536f32,
    0.009449547f32,
    0.009433791f32,
    0.009418093f32,
    0.009402451f32,
    0.009386865f32,
    0.009371336f32,
    0.009355863f32,
    0.009340445f32,
    0.0093250815f32,
    0.009309774f32,
    0.009294521f32,
    0.009279322f32,
    0.009264177f32,
    0.009249086f32,
    0.0092340475f32,
    0.009219063f32,
    0.009204132f32,
    0.009189252f32,
    0.009174425f32,
    0.00915965f32,
    0.009144926f32,
    0.009130254f32,
    0.009115634f32,
    0.009101064f32,
    0.009086545f32,
    0.009072076f32,
    0.009057656f32,
    0.009043287f32,
    0.0090289675f32,
    0.009014697f32,
    0.0090004755f32,
    0.008986303f32,
    0.008972178f32,
    0.008958102f32,
    0.008944074f32,
    0.008930094f32,
    0.008916161f32,
    0.008902275f32,
    0.0088884365f32,
    0.0088746445f32,
    0.008860899f32,
    0.008847199f32,
    0.008833546f32,
    0.008819939f32,
    0.008806377f32,
    0.0087928595f32,
    0.008779388f32,
    0.008765961f32,
    0.008752579f32,
    0.0087392405f32,
    0.008725947f32,
    0.008712697f32,
    0.008699491f32,
    0.008686327f32,
    0.008673208f32,
    0.008660132f32,
    0.008647098f32,
    0.008634107f32,
    0.008621158f32,
    0.008608252f32,
    0.0085953865f32,
    0.008582564f32,
    0.008569783f32,
    0.008557042f32,
    0.0085443435f32,
    0.008531685f32,
    0.008519067f32,
    0.008506491f32,
    0.008493954f32,
    0.008481458f32,
    0.008469001f32,
    0.008456584f32,
    0.008444207f32,
    0.008431869f32,
    0.0084195705f32,
    0.008407311f32,
    0.008395089f32,
    0.008382906f32,
    0.008370762f32,
    0.0083586555f32,
    0.008346587f32,
    0.0083345575f32,
    0.008322565f32,
    0.0083106095f32,
    0.008298691f32,
    0.0082868105f32,
    0.008274967f32,
    0.00826316f32,
    0.008251389f32,
    0.008239654f32,
    0.008227956f32,
    0.0082162935f32,
    0.008204668f32,
    0.0081930775f32,
    0.008181522f32,
    0.008170002f32,
    0.008158518f32,
    0.008147068f32,
    0.008135654f32,
    0.008124274f32,
    0.008112929f32,
    0.008101618f32,
    0.0080903405f32,
    0.008079098f32,
    0.008067889f32,
    0.008056714f32,
    0.008045573f32,
    0.008034464f32,
    0.00802339f32,
    0.008012348f32,
    0.008001339f32,
    0.007990363f32,
    0.00797942f32,
    0.007968509f32,
    0.00795763f32,
    0.007946784f32,
    0.00793597f32,
    0.007925187f32,
    0.007914437f32,
    0.007903718f32,
    0.0078930305f32,
    0.007882374f32,
    0.00787175f32,
    0.007861156f32,
    0.007850593f32,
    0.007840061f32,
    0.007829559f32,
    0.007819088f32,
    0.0078086476f32,
    0.0077982373f32,
    0.0077878567f32,
    0.0077775065f32,
    0.007767186f32,
    0.0077568954f32,
    0.007746634f32,
    0.007736402f32,
    0.0077261995f32,
    0.007716026f32,
    0.0077058817f32,
    0.007695766f32,
    0.0076856795f32,
    0.0076756217f32,
    0.0076655922f32,
    0.0076555912f32,
    0.0076456186f32,
    0.007635674f32,
    0.0076257573f32,
    0.0076158685f32,
    0.007606008f32,
    0.0075961747f32,
    0.0075863693f32,
    0.007576591f32,
    0.00756684f32,
    0.0075571164f32,
    0.00754742f32,
    0.00753775f32,
    0.0075281076f32,
    0.0075184912f32,
    0.007508902f32,
    0.007499339f32,
    0.007489803f32,
    0.0074802926f32,
    0.0074708085f32,
    0.0074613504f32,
    0.0074519184f32,
    0.007442512f32,
    0.007433132f32,
    0.0074237767f32,
    0.0074144476f32,
    0.007405143f32,
    0.007395865f32,
    0.0073866113f32,
    0.007377383f32,
    0.0073681795f32,
    0.007359001f32,
    0.0073498474f32,
    0.007340718f32,
    0.007331614f32,
    0.007322534f32,
    0.0073134783f32,
    0.007304447f32,
    0.0072954395f32,
    0.0072864564f32,
    0.007277497f32,
    0.0072685615f32,
    0.00725965f32,
    0.007250762f32,
    0.0072418978f32,
    0.007233057f32,
    0.0072242394f32,
    0.0072154454f32,
    0.007206674f32,
    0.0071979263f32,
    0.0071892017f32,
    0.0071804994f32,
    0.0071718204f32,
    0.0071631637f32,
    0.00715453f32,
    0.007145919f32,
    0.00713733f32,
    0.0071287635f32,
    0.007120219f32,
    0.007111697f32,
    0.0071031973f32,
    0.0070947194f32,
    0.0070862635f32,
    0.007077829f32,
    0.007069417f32,
    0.0070610256f32,
    0.0070526567f32,
    0.007044309f32,
    0.0070359823f32,
    0.0070276773f32,
    0.0070193936f32,
    0.007011131f32,
    0.007002889f32,
    0.006994669f32,
    0.006986469f32,
    0.00697829f32,
    0.006970132f32,
    0.0069619943f32,
    0.0069538774f32,
    0.006945781f32,
    0.006937705f32,
    0.006929649f32,
    0.0069216136f32,
    0.006913598f32,
    0.006905603f32,
    0.006897628f32,
    0.006889673f32,
    0.0068817376f32,
    0.006873822f32,
    0.006865926f32,
    0.00685805f32,
    0.0068501933f32,
    0.0068423557f32,
    0.006834538f32,
    0.0068267398f32,
    0.0068189604f32,
    0.0068112006f32,
    0.0068034595f32,
    0.006795738f32,
    0.006788035f32,
    0.006780351f32,
    0.006772686f32,
    0.006765039f32,
    0.0067574116f32,
    0.0067498027f32,
    0.006742212f32,
    0.00673464f32,
    0.0067270864f32,
    0.006719551f32,
    0.006712034f32,
    0.0067045353f32,
    0.0066970545f32,
    0.006689592f32,
    0.0066821473f32,
    0.0066747204f32,
    0.006667312f32,
    0.006659921f32,
    0.0066525475f32,
    0.0066451915f32,
    0.0066378536f32,
    0.006630533f32,
    0.00662323f32,
    0.0066159447f32,
    0.006608676f32,
    0.0066014254f32,
    0.0065941913f32,
    0.0065869745f32,
    0.0065797754f32,
    0.0065725925f32,
    0.006565427f32,
    0.0065582786f32,
    0.0065511465f32,
    0.0065440317f32,
    0.006536933f32,
    0.006529852f32,
    0.006522787f32,
    0.006515738f32,
    0.006508706f32,
    0.0065016905f32,
    0.006494691f32,
    0.006487708f32,
    0.0064807413f32,
    0.006473791f32,
    0.0064668567f32,
    0.0064599384f32,
    0.006453036f32,
    0.0064461497f32,
    0.0064392793f32,
    0.0064324243f32,
    0.0064255856f32,
    0.0064187627f32,
    0.006411955f32,
    0.006405163f32,
    0.0063983873f32,
    0.0063916263f32,
    0.006384881f32,
    0.006378151f32,
    0.0063714366f32,
    0.006364737f32,
    0.006358053f32,
    0.0063513843f32,
    0.006344731f32,
    0.006338092f32,
    0.0063314685f32,
    0.00632486f32,
    0.006318266f32,
    0.006311687f32,
    0.006305123f32,
    0.006298574f32,
    0.0062920395f32,
    0.00628552f32,
    0.0062790145f32,
    0.0062725237f32,
    0.0062660472f32,
    0.0062595857f32,
    0.006253138f32,
    0.006246705f32,
    0.006240287f32,
    0.006233882f32,
    0.006227492f32,
    0.006221116f32,
    0.006214754f32,
    0.0062084063f32,
    0.0062020724f32,
    0.0061957524f32,
    0.006189447f32,
    0.006183155f32,
    0.0061768764f32,
    0.0061706123f32,
    0.0061643613f32,
    0.006158124f32,
    0.006151901f32,
    0.0061456915f32,
    0.006139495f32,
    0.0061333124f32,
    0.0061271433f32,
    0.0061209872f32,
    0.0061148447f32,
    0.0061087157f32,
    0.0061026f32,
    0.006096497f32,
    0.006090408f32,
    0.006084332f32,
    0.0060782684f32,
    0.0060722185f32,
    0.006066181f32,
    0.0060601574f32,
    0.006054146f32,
    0.006048148f32,
    0.0060421624f32,
    0.00603619f32,
    0.00603023f32,
    0.006024283f32,
    0.0060183485f32,
    0.0060124267f32,
    0.0060065174f32,
    0.006000621f32,
    0.0059947367f32,
    0.0059888647f32,
    0.0059830057f32,
    0.005977159f32,
    0.005971324f32,
    0.005965502f32,
    0.0059596924f32,
    0.0059538945f32,
    0.005948109f32,
    0.005942336f32,
    0.005936574f32,
    0.005930825f32,
    0.005925088f32,
    0.005919363f32,
    0.0059136497f32,
    0.0059079486f32,
    0.005902259f32,
    0.005896582f32,
    0.005890916f32,
    0.005885262f32,
    0.0058796196f32,
    0.0058739893f32,
    0.00586837f32,
    0.0058627627f32,
    0.0058571673f32,
    0.005851583f32,
    0.00584601f32,
    0.005840449f32,
    0.0058348994f32,
    0.005829361f32,
    0.005823834f32,
    0.005818318f32,
    0.005812814f32,
    0.0058073206f32,
    0.005801839f32,
    0.005796368f32,
    0.0057909084f32,
    0.00578546f32,
    0.0057800226f32,
    0.0057745962f32,
    0.0057691806f32,
    0.0057637766f32,
    0.005758383f32,
    0.0057530003f32,
    0.005747629f32,
    0.0057422677f32,
    0.0057369177f32,
    0.0057315785f32,
    0.00572625f32,
    0.005720932f32,
    0.005715625f32,
    0.0057103285f32,
    0.0057050427f32,
    0.0056997673f32,
    0.0056945025f32,
    0.005689248f32,
    0.005684004f32,
    0.005678771f32,
    0.0056735477f32,
    0.005668335f32,
    0.0056631328f32,
    0.005657941f32,
    0.005652759f32,
    0.005647588f32,
    0.0056424267f32,
    0.005637276f32,
    0.005632135f32,
    0.005627004f32,
    0.0056218836f32,
    0.005616773f32,
    0.0056116725f32,
    0.005606582f32,
    0.0056015016f32,
    0.005596431f32,
    0.00559137f32,
    0.0055863196f32,
    0.0055812784f32,
    0.0055762473f32,
    0.005571226f32,
    0.005566214f32,
    0.0055612125f32,
    0.0055562207f32,
    0.005551238f32,
    0.0055462653f32,
    0.005541302f32,
    0.0055363486f32,
    0.0055314046f32,
    0.00552647f32,
    0.005521545f32,
    0.0055166297f32,
    0.0055117235f32,
    0.0055068266f32,
    0.0055019394f32,
    0.0054970616f32,
    0.005492193f32,
    0.005487334f32,
    0.005482484f32,
    0.0054776436f32,
    0.005472812f32,
    0.0054679895f32,
    0.0054631764f32,
    0.0054583726f32,
    0.0054535777f32,
    0.005448792f32,
    0.0054440154f32,
    0.005439248f32,
    0.0054344893f32,
    0.0054297396f32,
    0.005424999f32,
    0.0054202676f32,
    0.005415545f32,
    0.005410831f32,
    0.005406126f32,
    0.0054014297f32,
    0.0053967424f32,
    0.0053920634f32,
    0.0053873938f32,
    0.0053827325f32,
    0.00537808f32,
    0.0053734365f32,
    0.0053688013f32,
    0.005364175f32,
    0.005359557f32,
    0.005354948f32,
    0.005350347f32,
    0.005345755f32,
    0.0053411713f32,
    0.005336596f32,
    0.0053320294f32,
    0.005327471f32,
    0.0053229216f32,
    0.00531838f32,
    0.0053138467f32,
    0.005309322f32,
    0.0053048055f32,
    0.0053002974f32,
    0.0052957977f32,
    0.005291306f32,
    0.0052868226f32,
    0.005282347f32,
    0.00527788f32,
    0.0052734213f32,
    0.0052689705f32,
    0.005264528f32,
    0.005260093f32,
    0.0052556666f32,
    0.0052512484f32,
    0.005246838f32,
    0.0052424353f32,
    0.005238041f32,
    0.0052336543f32,
];

fn compute_split_amount(configuration: ScenarioConfiguration) -> u32 {
    let split_amount = Ord::clamp(
        (SPLIT_LUT[configuration.penalty as usize] * configuration.mattresses as f32).round()
            as u32,
        1,
        configuration.mattresses - 1,
    );
    let next_split_amount = Ord::clamp(
        (SPLIT_LUT[configuration.penalty as usize]
            * SPLIT_LUT[configuration.penalty as usize]
            * configuration.mattresses as f32)
            .floor() as u32,
        0,
        configuration.mattresses - 1,
    );
    // if configuration.penalty > configuration.nights {
    //     1
    // } else {
    split_amount
    // }
}

#[derive(Copy, Clone)]
struct ScenarioConfiguration {
    mattresses: u32,
    nights: u32,
    penalty: u32,
    offset: u32,
    split_amount: u32,
    next_split_amount: u32,
}

struct Scenario<B: std::io::BufRead, W: std::io::Write> {
    buf_reader: B,
    buf_writer: W,
    configuration: ScenarioConfiguration,
}

const SLEPT_ON_PEA: bool = true;

impl<B: std::io::BufRead, W: std::io::Write> Scenario<B, W> {
    fn new(mattresses: u32, nights: u32, penalty: u32, buf_reader: B, buf_writer: W) -> Self {
        Scenario {
            buf_reader,
            buf_writer,
            configuration: ScenarioConfiguration {
                mattresses,
                nights,
                penalty,
                offset: 0,
                split_amount: u32::MAX,
                next_split_amount: u32::MAX,
            },
        }
    }

    fn scenario_step(&mut self) {
        let mattress_indices = self.get_split_range();
        let query_result = self.make_query(mattress_indices);
        self.take_based_on_query(query_result);
    }

    fn make_query(&mut self, mattress_indices: std::ops::Range<u32>) -> bool {
        self.print_mattress_query(mattress_indices);
        read_one::<u8, _>(&mut self.buf_reader) != 0
    }

    fn print_mattress_query(&mut self, mattress_indices: std::ops::Range<u32>) {
        let mattress_stringlist = mattress_indices
            .map(|x| x.to_string())
            .reduce(|mut full, next| {
                full.push(' ');
                full.push_str(next.as_str());
                full
            })
            .unwrap_or_default();
        println!("? {}", mattress_stringlist);
    }

    /// A version of the `scenario_step` call that answers its own queries for testing purposes
    fn autonomous_step(&mut self, pea_location: u32) {
        let mattress_indices = self.get_split_range();
        self.print_mattress_query(mattress_indices.clone());
        let pea_in_range = mattress_indices.contains(&pea_location);
        println!("{}", pea_in_range as u8);
        self.take_based_on_query(pea_in_range);
    }

    fn get_split_range(&mut self) -> std::ops::Range<u32> {
        // if self.configuration.split_amount >= self.configuration.mattresses {
        //     let split_amount = Ord::clamp(
        //         (SPLIT_LUT[self.configuration.penalty as usize]
        //             * self.configuration.mattresses as f32)
        //             .round() as u32,
        //         1,
        //         self.configuration.mattresses - 1,
        //     );
        //     let next_split_amount = Ord::clamp(
        //         (SPLIT_LUT[self.configuration.penalty as usize] * split_amount as f32).round()
        //             as u32,
        //         1,
        //         split_amount,
        //     );
        //
        //     self.configuration.next_split_amount = next_split_amount;
        //     self.configuration.split_amount = self.configuration.next_split_amount;
        //
        //     // self.configuration.split_amount = compute_split_amount(self.configuration);
        //
        // }
        // self.configuration.split_amount = compute_split_amount(self.configuration);

        let split_amount = Ord::clamp(
            (SPLIT_LUT[self.configuration.penalty as usize]
                * self.configuration.mattresses as f32)
                .round() as u32,
            1,
            self.configuration.mattresses - 1,
        );
        let next_split_amount = Ord::clamp(
            (SPLIT_LUT[self.configuration.penalty as usize] * split_amount as f32).round()
                as u32,
            1,
            split_amount,
        );

        self.configuration.next_split_amount = next_split_amount;
        self.configuration.split_amount = self.configuration.next_split_amount;

        // TODO: This 'switch to linear search' needs to be the size of the next split times the count of the next split
        // or does it just need to be the count of?
        // Careful! _any_ guess takes a night, so we need to not act prematurely
        if self.configuration.penalty > 0 && self.configuration.penalty > self.configuration.nights
        {
            self.configuration.split_amount = 1;
            self.configuration.next_split_amount = 1;
        }

        // if self.configuration.split_amount > self.configuration.mattresses.div_euclid(2) {
        //     self.configuration.split_amount = self.configuration.next_split_amount;
        //     self.configuration.next_split_amount = 1;
        // }

        // Incorrect, but logic has merit: "if ever I can afford a linear search and guarantee avoiding the penalty, then I should consider that"
        // if 2 * self.configuration.penalty > self.configuration.mattresses && self.configuration.nights > self.configuration.mattresses {
        //     self.configuration.split_amount = 1;
        //     self.configuration.next_split_amount = 1;
        // }
        if self.configuration.nights - 1 > self.configuration.mattresses {
            self.configuration.split_amount = 1;
            self.configuration.next_split_amount = 1;
        }

        let min = self.configuration.offset;
        let mattress_indices = min..min + self.configuration.split_amount;
        mattress_indices
    }

    fn take_based_on_query(&mut self, query_result: bool) {
        if query_result == SLEPT_ON_PEA {
            self.take_queried_section();
        } else {
            self.take_other_section();
        }
    }

    fn take_other_section(&mut self) {
        if self.configuration.nights != 0 {
            self.configuration.nights -= 1;
        } else {
            self.configuration.nights = u32::MAX;
        }

        self.configuration.offset += self.configuration.split_amount;
        self.configuration.mattresses -= self.configuration.split_amount;
    }

    fn take_queried_section(&mut self) {
        if self.configuration.nights > self.configuration.penalty {
            self.configuration.nights -= 1 + self.configuration.penalty;
        } else {
            self.configuration.nights = 0;
            self.configuration.nights = u32::MAX;
        }
        self.configuration.mattresses = self.configuration.split_amount;
    }
}

fn main() {
    let mut stdin = std::io::BufReader::with_capacity(64, std::io::stdin().lock());
    let stdout = std::io::BufWriter::with_capacity(64, std::io::stdout().lock());

    let [mattresses, nights, penalty]: [u32; 3] = read_vec(&mut stdin).try_into().unwrap();

    let mut scenario = Scenario::new(mattresses, nights, penalty, stdin, stdout);
    while scenario.configuration.mattresses > 1
        && scenario.configuration.nights > 0
        && scenario.configuration.nights < nights
    {
        scenario.scenario_step();
    }

    println!("! {}", scenario.configuration.offset);
}

#[cfg(test)]
mod prinsesse_tests;
