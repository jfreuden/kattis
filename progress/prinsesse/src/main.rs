fn read_vec<T: std::str::FromStr, B: std::io::BufRead>(bufreader: &mut B) -> Vec<T>
where
    T::Err: std::fmt::Debug,
{
    let mut line = String::new();
    bufreader.read_line(&mut line).unwrap();
    line.split_whitespace()
        .map(|tok| tok.parse::<T>().expect("Failed to parse input"))
        .collect()
}

fn read_one<T: std::str::FromStr, B: std::io::BufRead>(bufreader: &mut B) -> T
where
    T::Err: std::fmt::Debug,
{
    let mut line = String::new();
    bufreader.read_line(&mut line).unwrap();
    line.trim().parse::<T>().unwrap()
}

const SPLIT_LUT: [f32; 1001] = [
    0.5f32,
    0.38196567f32,
    0.3176721f32,
    0.27550805f32,
    0.24512234f32,
    0.22191015f32,
    0.2034553f32,
    0.18834731f32,
    0.17569906f32,
    0.1649208f32,
    0.15560219f32,
    0.14744884f32,
    0.1402429f32,
    0.13381922f32,
    0.1280491f32,
    0.12283267f32,
    0.11808988f32,
    0.11375442f32,
    0.10977439f32,
    0.10610435f32,
    0.10270837f32,
    0.099554494f32,
    0.09661677f32,
    0.093872726f32,
    0.0913024f32,
    0.08888932f32,
    0.08661801f32,
    0.08447699f32,
    0.08245378f32,
    0.08053839f32,
    0.07872234f32,
    0.076998144f32,
    0.07535781f32,
    0.07379535f32,
    0.07230527f32,
    0.07088258f32,
    0.06952179f32,
    0.06821941f32,
    0.066971935f32,
    0.06577488f32,
    0.06462525f32,
    0.06352054f32,
    0.06245827f32,
    0.06143543f32,
    0.060449533f32,
    0.059499577f32,
    0.058582067f32,
    0.057696506f32,
    0.056840897f32,
    0.05601324f32,
    0.055212542f32,
    0.054437302f32,
    0.053686023f32,
    0.052958205f32,
    0.052251853f32,
    0.051566966f32,
    0.050901547f32,
    0.050255597f32,
    0.049627617f32,
    0.04901711f32,
    0.048423573f32,
    0.047845513f32,
    0.047283426f32,
    0.046735317f32,
    0.046201684f32,
    0.04568153f32,
    0.045174852f32,
    0.044680156f32,
    0.04419744f32,
    0.043726206f32,
    0.043266453f32,
    0.042817183f32,
    0.042378396f32,
    0.041949593f32,
    0.041530274f32,
    0.04112044f32,
    0.04071959f32,
    0.04032723f32,
    0.039943352f32,
    0.039567463f32,
    0.03919956f32,
    0.038839146f32,
    0.03848622f32,
    0.038140282f32,
    0.037800834f32,
    0.037468873f32,
    0.037142903f32,
    0.036822923f32,
    0.036509432f32,
    0.03620193f32,
    0.035899922f32,
    0.035603903f32,
    0.035312876f32,
    0.03502734f32,
    0.034746796f32,
    0.034471244f32,
    0.034200184f32,
    0.033934116f32,
    0.03367304f32,
    0.03341596f32,
    0.03316337f32,
    0.032914773f32,
    0.03267067f32,
    0.03243006f32,
    0.032193944f32,
    0.03196132f32,
    0.031732194f32,
    0.03150706f32,
    0.03128542f32,
    0.031066775f32,
    0.030852124f32,
    0.030640468f32,
    0.030431807f32,
    0.03022664f32,
    0.030024469f32,
    0.029825293f32,
    0.029628612f32,
    0.029435426f32,
    0.029244736f32,
    0.029056542f32,
    0.028871343f32,
    0.02868864f32,
    0.028508432f32,
    0.028330721f32,
    0.028155506f32,
    0.027982786f32,
    0.027812563f32,
    0.027644336f32,
    0.027478106f32,
    0.027314372f32,
    0.027153134f32,
    0.026993394f32,
    0.02683615f32,
    0.026680902f32,
    0.026527151f32,
    0.026375897f32,
    0.02622614f32,
    0.02607838f32,
    0.025932617f32,
    0.025788851f32,
    0.025646083f32,
    0.025505811f32,
    0.025367036f32,
    0.02522976f32,
    0.02509398f32,
    0.024960198f32,
    0.024827912f32,
    0.024697125f32,
    0.024567336f32,
    0.024439543f32,
    0.024313249f32,
    0.024188451f32,
    0.024064653f32,
    0.02394285f32,
    0.023822047f32,
    0.02370274f32,
    0.023584433f32,
    0.023467623f32,
    0.02335181f32,
    0.023237996f32,
    0.02312468f32,
    0.023012862f32,
    0.022902042f32,
    0.02279272f32,
    0.022684395f32,
    0.02257707f32,
    0.022471242f32,
    0.022365913f32,
    0.022262082f32,
    0.022159249f32,
    0.022057414f32,
    0.021956578f32,
    0.02185674f32,
    0.0217584f32,
    0.021660559f32,
    0.021563716f32,
    0.021467872f32,
    0.021372527f32,
    0.02127868f32,
    0.02118583f32,
    0.02109348f32,
    0.021002129f32,
    0.020911776f32,
    0.020821922f32,
    0.020733066f32,
    0.020645209f32,
    0.02055835f32,
    0.02047199f32,
    0.02038613f32,
    0.020301767f32,
    0.020217404f32,
    0.020134538f32,
    0.020052172f32,
    0.019970305f32,
    0.019889437f32,
    0.019809067f32,
    0.019729696f32,
    0.019650824f32,
    0.019572452f32,
    0.019495077f32,
    0.019418202f32,
    0.019342326f32,
    0.019266948f32,
    0.01919207f32,
    0.01911769f32,
    0.01904431f32,
    0.018971428f32,
    0.018899046f32,
    0.018827163f32,
    0.018756278f32,
    0.018685393f32,
    0.018615507f32,
    0.01854612f32,
    0.018477231f32,
    0.018408842f32,
    0.018341452f32,
    0.018274061f32,
    0.01820767f32,
    0.018141776f32,
    0.018075883f32,
    0.018010989f32,
    0.017946593f32,
    0.017882198f32,
    0.017818801f32,
    0.017755903f32,
    0.017693505f32,
    0.017631106f32,
    0.017569706f32,
    0.017508805f32,
    0.017447904f32,
    0.017388001f32,
    0.017328098f32,
    0.017268695f32,
    0.01720979f32,
    0.017151386f32,
    0.01709348f32,
    0.017036073f32,
    0.016979165f32,
    0.016922258f32,
    0.01686585f32,
    0.01681044f32,
    0.01675453f32,
    0.01669962f32,
    0.016645208f32,
    0.016590796f32,
    0.016536884f32,
    0.01648347f32,
    0.016430058f32,
    0.016377643f32,
    0.016325228f32,
    0.016273312f32,
    0.016221397f32,
    0.01616998f32,
    0.016119562f32,
    0.016068645f32,
    0.016018227f32,
    0.015968807f32,
    0.015918888f32,
    0.015869968f32,
    0.015821047f32,
    0.015772626f32,
    0.015724204f32,
    0.015676282f32,
    0.01562886f32,
    0.0155813545f32,
    0.015534343f32,
    0.015487832f32,
    0.015441321f32,
    0.01539531f32,
    0.015349799f32,
    0.015304288f32,
    0.015259277f32,
    0.015214266f32,
    0.015169756f32,
    0.015125245f32,
    0.015081234f32,
    0.015037724f32,
    0.014994213f32,
    0.014951203f32,
    0.014908193f32,
    0.014865682f32,
    0.014823172f32,
    0.014781162f32,
    0.014739652f32,
    0.014697642f32,
    0.014656632f32,
    0.014615622f32,
    0.0145746125f32,
    0.014534103f32,
    0.014493593f32,
    0.014453583f32,
    0.014414074f32,
    0.014374064f32,
    0.014335055f32,
    0.0142960455f32,
    0.014257036f32,
    0.014218527f32,
    0.014180018f32,
    0.014141508f32,
    0.014103499f32,
    0.01406599f32,
    0.014028481f32,
    0.013990972f32,
    0.013953963f32,
    0.013916954f32,
    0.013880446f32,
    0.013843937f32,
    0.013807928f32,
    0.0137719195f32,
    0.013735911f32,
    0.013700402f32,
    0.013664894f32,
    0.013629385f32,
    0.013594377f32,
    0.013559869f32,
    0.01352536f32,
    0.013490852f32,
    0.013456344f32,
    0.0134223355f32,
    0.013388327f32,
    0.013354819f32,
    0.013321311f32,
    0.013287803f32,
    0.013254795f32,
    0.013221787f32,
    0.0131892795f32,
    0.013156772f32,
    0.013124264f32,
    0.013091756f32,
    0.013059748f32,
    0.013027741f32,
    0.012996233f32,
    0.0129647255f32,
    0.012933218f32,
    0.01290171f32,
    0.012870703f32,
    0.012840196f32,
    0.012809188f32,
    0.012778681f32,
    0.012748173f32,
    0.012718166f32,
    0.012687659f32,
    0.012657652f32,
    0.012628145f32,
    0.0125986375f32,
    0.01256913f32,
    0.012539623f32,
    0.012510616f32,
    0.012481109f32,
    0.012452602f32,
    0.012423595f32,
    0.012395089f32,
    0.012366582f32,
    0.012338075f32,
    0.012310068f32,
    0.012282061f32,
    0.012254055f32,
    0.012226548f32,
    0.012199041f32,
    0.012171535f32,
    0.012144028f32,
    0.012116522f32,
    0.012089515f32,
    0.012062509f32,
    0.012036002f32,
    0.012008996f32,
    0.011982489f32,
    0.011955983f32,
    0.011929977f32,
    0.0119039705f32,
    0.011877464f32,
    0.011851458f32,
    0.011825952f32,
    0.0117999455f32,
    0.011774439f32,
    0.011748933f32,
    0.011723927f32,
    0.011698921f32,
    0.011673415f32,
    0.011648409f32,
    0.011623903f32,
    0.011598897f32,
    0.011574391f32,
    0.011549885f32,
    0.0115253795f32,
    0.011501374f32,
    0.011476868f32,
    0.011452862f32,
    0.011428856f32,
    0.011405351f32,
    0.011381345f32,
    0.011357839f32,
    0.011334334f32,
    0.011310828f32,
    0.011287322f32,
    0.011264317f32,
    0.011241311f32,
    0.011218306f32,
    0.0111953f32,
    0.011172795f32,
    0.011149789f32,
    0.011127284f32,
    0.011104778f32,
    0.011082273f32,
    0.011060268f32,
    0.011037762f32,
    0.011015757f32,
    0.010993752f32,
    0.010971746f32,
    0.010950241f32,
    0.010928236f32,
    0.010906731f32,
    0.010885226f32,
    0.01086372f32,
    0.010842215f32,
    0.01082121f32,
    0.010800205f32,
    0.0107787f32,
    0.010757695f32,
    0.01073719f32,
    0.010716185f32,
    0.01069568f32,
    0.010674675f32,
    0.01065417f32,
    0.010633665f32,
    0.01061366f32,
    0.010593155f32,
    0.010573151f32,
    0.010552646f32,
    0.010532641f32,
    0.010512636f32,
    0.010493131f32,
    0.010473127f32,
    0.010453622f32,
    0.010433617f32,
    0.010414112f32,
    0.010394608f32,
    0.010375603f32,
    0.010356098f32,
    0.010337094f32,
    0.010317589f32,
    0.010298585f32,
    0.01027958f32,
    0.010260575f32,
    0.010242071f32,
    0.010223066f32,
    0.010204562f32,
    0.010185557f32,
    0.010167053f32,
    0.0101485485f32,
    0.010130544f32,
    0.01011204f32,
    0.010093535f32,
    0.010075531f32,
    0.010057527f32,
    0.010039522f32,
    0.010021518f32,
    0.010003514f32,
    0.009985509f32,
    0.009968005f32,
    0.009950001f32,
    0.009932497f32,
    0.009914992f32,
    0.009897488f32,
    0.009879984f32,
    0.00986298f32,
    0.009845476f32,
    0.009828472f32,
    0.009810967f32,
    0.009793963f32,
    0.009776959f32,
    0.009759955f32,
    0.009742951f32,
    0.009725947f32,
    0.009709443f32,
    0.009692439f32,
    0.009675935f32,
    0.009659431f32,
    0.009642927f32,
    0.009626423f32,
    0.009609919f32,
    0.009593915f32,
    0.009577411f32,
    0.009561407f32,
    0.009544903f32,
    0.0095289f32,
    0.009512896f32,
    0.009496892f32,
    0.009480888f32,
    0.009464884f32,
    0.00944938f32,
    0.009433377f32,
    0.009417873f32,
    0.009402369f32,
    0.009386865f32,
    0.009370862f32,
    0.009355858f32,
    0.009340354f32,
    0.0093248505f32,
    0.009309347f32,
    0.009294343f32,
    0.00927934f32,
    0.009263836f32,
    0.009248832f32,
    0.009233829f32,
    0.009218825f32,
    0.009203821f32,
    0.009188818f32,
    0.009174314f32,
    0.009159311f32,
    0.009144807f32,
    0.009129804f32,
    0.0091153f32,
    0.009100797f32,
    0.009086293f32,
    0.00907179f32,
    0.009057286f32,
    0.009043283f32,
    0.009028779f32,
    0.009014276f32,
    0.0090002725f32,
    0.008986269f32,
    0.008971766f32,
    0.008957762f32,
    0.008943759f32,
    0.008929756f32,
    0.008915752f32,
    0.008902249f32,
    0.008888246f32,
    0.008874242f32,
    0.008860739f32,
    0.008846736f32,
    0.008833232f32,
    0.008819729f32,
    0.008806226f32,
    0.008792723f32,
    0.008779219f32,
    0.008765716f32,
    0.008752213f32,
    0.00873921f32,
    0.0087257065f32,
    0.008712203f32,
    0.0086992f32,
    0.008686197f32,
    0.008673194f32,
    0.008659691f32,
    0.0086466875f32,
    0.008633684f32,
    0.008620681f32,
    0.008608178f32,
    0.008595175f32,
    0.008582172f32,
    0.008569669f32,
    0.008556666f32,
    0.008544163f32,
    0.00853166f32,
    0.008518657f32,
    0.008506154f32,
    0.008493651f32,
    0.008481148f32,
    0.008468645f32,
    0.008456142f32,
    0.008444139f32,
    0.008431636f32,
    0.008419133f32,
    0.00840713f32,
    0.008394627f32,
    0.008382624f32,
    0.008370621f32,
    0.008358618f32,
    0.008346115f32,
    0.008334112f32,
    0.0083221095f32,
    0.008310107f32,
    0.008298604f32,
    0.008286601f32,
    0.008274598f32,
    0.008263095f32,
    0.008251092f32,
    0.00823959f32,
    0.008227587f32,
    0.008216084f32,
    0.008204581f32,
    0.008193078f32,
    0.008181076f32,
    0.008169573f32,
    0.00815807f32,
    0.008147067f32,
    0.008135565f32,
    0.008124062f32,
    0.008112559f32,
    0.008101556f32,
    0.008090054f32,
    0.008079051f32,
    0.008067548f32,
    0.008056546f32,
    0.008045543f32,
    0.00803404f32,
    0.008023038f32,
    0.008012035f32,
    0.008001032f32,
    0.00799003f32,
    0.007979027f32,
    0.007968024f32,
    0.007957522f32,
    0.007946519f32,
    0.007935517f32,
    0.007925014f32,
    0.007914011f32,
    0.007903509f32,
    0.007893006f32,
    0.007882004f32,
    0.007871501f32,
    0.007860999f32,
    0.007850496f32,
    0.007839994f32,
    0.007829491f32,
    0.0078189885f32,
    0.007808486f32,
    0.0077979835f32,
    0.007787481f32,
    0.0077774785f32,
    0.007766976f32,
    0.0077564735f32,
    0.007746471f32,
    0.0077359686f32,
    0.007725966f32,
    0.0077159638f32,
    0.0077054612f32,
    0.007695459f32,
    0.0076854564f32,
    0.007675454f32,
    0.0076654516f32,
    0.007655449f32,
    0.007645447f32,
    0.0076354444f32,
    0.007625442f32,
    0.0076154396f32,
    0.0076059373f32,
    0.007595935f32,
    0.0075859325f32,
    0.00757643f32,
    0.007566428f32,
    0.0075569255f32,
    0.007546923f32,
    0.007537421f32,
    0.0075279186f32,
    0.0075184163f32,
    0.007508414f32,
    0.0074989116f32,
    0.0074894093f32,
    0.007479907f32,
    0.0074704047f32,
    0.0074609024f32,
    0.0074519003f32,
    0.007442398f32,
    0.0074328957f32,
    0.0074233934f32,
    0.0074143913f32,
    0.007404889f32,
    0.0073953867f32,
    0.0073863845f32,
    0.0073768822f32,
    0.00736788f32,
    0.007358878f32,
    0.0073493756f32,
    0.0073403735f32,
    0.0073313713f32,
    0.007322369f32,
    0.007313367f32,
    0.007304365f32,
    0.0072953627f32,
    0.0072863605f32,
    0.0072773583f32,
    0.007268356f32,
    0.007259354f32,
    0.007250352f32,
    0.00724185f32,
    0.0072328476f32,
    0.0072238455f32,
    0.0072153434f32,
    0.0072063413f32,
    0.007197839f32,
    0.007188837f32,
    0.007180335f32,
    0.007171833f32,
    0.007162831f32,
    0.0071543287f32,
    0.0071458267f32,
    0.0071373247f32,
    0.0071283225f32,
    0.0071198205f32,
    0.0071113184f32,
    0.0071028164f32,
    0.0070943143f32,
    0.0070858123f32,
    0.0070778104f32,
    0.0070693083f32,
    0.0070608063f32,
    0.007052304f32,
    0.007043802f32,
    0.0070358003f32,
    0.007027298f32,
    0.0070192963f32,
    0.0070107942f32,
    0.0070027923f32,
    0.0069942903f32,
    0.0069862884f32,
    0.0069782864f32,
    0.0069697844f32,
    0.0069617825f32,
    0.0069537805f32,
    0.0069452785f32,
    0.0069372766f32,
    0.0069292746f32,
    0.0069212727f32,
    0.006913271f32,
    0.006905269f32,
    0.006897267f32,
    0.006889265f32,
    0.006881263f32,
    0.0068737613f32,
    0.0068657594f32,
    0.0068577575f32,
    0.0068497555f32,
    0.0068422537f32,
    0.006834252f32,
    0.00682625f32,
    0.006818748f32,
    0.006810746f32,
    0.0068032444f32,
    0.0067952424f32,
    0.0067877406f32,
    0.006780239f32,
    0.006772237f32,
    0.006764735f32,
    0.0067572333f32,
    0.0067497315f32,
    0.0067417296f32,
    0.0067342278f32,
    0.006726726f32,
    0.006719224f32,
    0.0067117224f32,
    0.0067042205f32,
    0.0066967187f32,
    0.006689217f32,
    0.006681715f32,
    0.0066747135f32,
    0.0066672117f32,
    0.00665971f32,
    0.006652208f32,
    0.0066447062f32,
    0.0066377046f32,
    0.0066302028f32,
    0.006623201f32,
    0.0066156993f32,
    0.0066081975f32,
    0.006601196f32,
    0.006594194f32,
    0.0065866923f32,
    0.0065796906f32,
    0.006572189f32,
    0.006565187f32,
    0.0065581854f32,
    0.0065506836f32,
    0.006543682f32,
    0.0065366803f32,
    0.0065296786f32,
    0.006522677f32,
    0.006515675f32,
    0.0065086735f32,
    0.006501672f32,
    0.00649467f32,
    0.0064876685f32,
    0.006480667f32,
    0.006473665f32,
    0.0064666634f32,
    0.0064596618f32,
    0.00645266f32,
    0.0064456584f32,
    0.006439157f32,
    0.006432155f32,
    0.0064251535f32,
    0.006418652f32,
    0.00641165f32,
    0.0064046485f32,
    0.006398147f32,
    0.0063911453f32,
    0.0063846437f32,
    0.006378142f32,
    0.0063711405f32,
    0.006364639f32,
    0.0063576372f32,
    0.0063511357f32,
    0.006344634f32,
    0.0063376324f32,
    0.006331131f32,
    0.0063246293f32,
    0.0063181277f32,
    0.006311626f32,
    0.0063051246f32,
    0.006298123f32,
    0.0062916214f32,
    0.00628512f32,
    0.0062786182f32,
    0.0062721167f32,
    0.006265615f32,
    0.0062591136f32,
    0.006253112f32,
    0.0062466105f32,
    0.006240109f32,
    0.0062336074f32,
    0.006227106f32,
    0.0062211044f32,
    0.006214603f32,
    0.0062081013f32,
    0.0062015997f32,
    0.0061955983f32,
    0.0061890967f32,
    0.0061830953f32,
    0.0061765937f32,
    0.0061705923f32,
    0.0061640907f32,
    0.0061580893f32,
    0.0061515877f32,
    0.0061455863f32,
    0.0061390847f32,
    0.0061330833f32,
    0.006127082f32,
    0.0061205802f32,
    0.006114579f32,
    0.0061085774f32,
    0.006102576f32,
    0.0060960744f32,
    0.006090073f32,
    0.0060840715f32,
    0.00607807f32,
    0.0060720686f32,
    0.006066067f32,
    0.0060600657f32,
    0.0060540643f32,
    0.006048063f32,
    0.0060420614f32,
    0.00603606f32,
    0.0060300585f32,
    0.006024057f32,
    0.0060180556f32,
    0.006012054f32,
    0.0060060527f32,
    0.0060005514f32,
    0.00599455f32,
    0.0059885485f32,
    0.005982547f32,
    0.0059770457f32,
    0.0059710443f32,
    0.005965043f32,
    0.0059595415f32,
    0.00595354f32,
    0.005948039f32,
    0.0059420373f32,
    0.005936536f32,
    0.0059305346f32,
    0.0059250332f32,
    0.005919032f32,
    0.0059135305f32,
    0.005907529f32,
    0.0059020277f32,
    0.0058965264f32,
    0.005890525f32,
    0.0058850236f32,
    0.0058795223f32,
    0.005873521f32,
    0.0058680195f32,
    0.005862518f32,
    0.005857017f32,
    0.0058515156f32,
    0.005845514f32,
    0.005840013f32,
    0.0058345115f32,
    0.00582901f32,
    0.005823509f32,
    0.0058180075f32,
    0.005812506f32,
    0.005807005f32,
    0.0058015035f32,
    0.005796002f32,
    0.005790501f32,
    0.0057849996f32,
    0.0057799984f32,
    0.005774497f32,
    0.0057689957f32,
    0.0057634944f32,
    0.005757993f32,
    0.005752992f32,
    0.0057474906f32,
    0.0057419892f32,
    0.005736488f32,
    0.0057314867f32,
    0.0057259854f32,
    0.005720484f32,
    0.005715483f32,
    0.0057099815f32,
    0.0057049803f32,
    0.005699479f32,
    0.005694478f32,
    0.0056889765f32,
    0.0056839753f32,
    0.005678474f32,
    0.005673473f32,
    0.0056679714f32,
    0.0056629702f32,
    0.005657469f32,
    0.0056524677f32,
    0.0056474665f32,
    0.005641965f32,
    0.005636964f32,
    0.005631963f32,
    0.0056269616f32,
    0.0056214603f32,
    0.005616459f32,
    0.005611458f32,
    0.0056064567f32,
    0.0056014555f32,
    0.005595954f32,
    0.005590953f32,
    0.0055859517f32,
    0.0055809505f32,
    0.0055759493f32,
    0.005570948f32,
    0.005565947f32,
    0.0055609457f32,
    0.0055559445f32,
    0.0055509433f32,
    0.005545942f32,
    0.005540941f32,
    0.0055359397f32,
    0.0055309385f32,
    0.0055264374f32,
    0.005521436f32,
    0.005516435f32,
    0.005511434f32,
    0.0055064326f32,
    0.0055019315f32,
    0.0054969303f32,
    0.005491929f32,
    0.005486928f32,
    0.005482427f32,
    0.0054774256f32,
    0.0054724244f32,
    0.0054679234f32,
    0.005462922f32,
    0.005457921f32,
    0.00545342f32,
    0.0054484187f32,
    0.0054439176f32,
    0.0054389164f32,
    0.0054344153f32,
    0.005429414f32,
    0.005424913f32,
    0.005419912f32,
    0.0054154107f32,
    0.0054104095f32,
    0.0054059085f32,
    0.0054014074f32,
    0.005396406f32,
    0.005391905f32,
    0.005386904f32,
    0.005382403f32,
    0.0053779017f32,
    0.0053734006f32,
    0.0053683994f32,
    0.0053638984f32,
    0.0053593973f32,
    0.005354896f32,
    0.005349895f32,
    0.005345394f32,
    0.005340893f32,
    0.0053363917f32,
    0.0053318907f32,
    0.0053273896f32,
    0.0053228885f32,
    0.0053178873f32,
    0.005313386f32,
    0.005308885f32,
    0.005304384f32,
    0.005299883f32,
    0.005295382f32,
    0.005290881f32,
    0.0052863797f32,
    0.0052818786f32,
    0.0052778777f32,
    0.0052733766f32,
    0.0052688755f32,
    0.0052643744f32,
    0.0052598733f32,
    0.0052553723f32,
    0.005250871f32,
    0.00524637f32,
    0.005242369f32,
    0.005237868f32,
    0.005233367f32,
];

fn compute_split_amount(configuration: ScenarioConfiguration) -> u32 {
    if configuration.penalty >= configuration.nights - 1 {
        1
    } else {
        Ord::clamp(
            (SPLIT_LUT[configuration.penalty as usize] * configuration.mattresses as f32).ceil() as u32,
            1,
            configuration.mattresses - 1,
        )
    }
}

#[derive(Copy, Clone)]
struct ScenarioConfiguration {
    mattresses: u32,
    nights: u32,
    penalty: u32,
    offset: u32,
    split_amount: u32,
}

struct Scenario<B: std::io::BufRead, W: std::io::Write> {
    buf_reader: B,
    buf_writer: W,
    configuration: ScenarioConfiguration,
}

const SLEPT_ON_PEA: bool = true;

impl<B: std::io::BufRead, W: std::io::Write> Scenario<B, W> {
    fn new(mattresses: u32, nights: u32, penalty: u32, buf_reader: B, buf_writer: W) -> Self {
        Scenario {
            buf_reader,
            buf_writer,
            configuration: ScenarioConfiguration {
                mattresses,
                nights,
                penalty,
                offset: 0,
                split_amount: u32::MAX,
            },
        }
    }

    fn scenario_step(&mut self) {
        let mattress_indices = self.get_split_range();
        let query_result = self.make_query(mattress_indices);
        self.take_based_on_query(query_result);
    }

    fn make_query(&mut self, mattress_indices: std::ops::Range<u32>) -> bool {
        self.print_mattress_query(mattress_indices);
        read_one::<u8, _>(&mut self.buf_reader) != 0
    }

    fn print_mattress_query(&mut self, mattress_indices: std::ops::Range<u32>) {
        let mattress_stringlist = mattress_indices
            .map(|x| x.to_string())
            .reduce(|mut full, next| {
                full.push(' ');
                full.push_str(next.as_str());
                full
            })
            .unwrap_or_default();
        println!("? {}", mattress_stringlist);
    }

    /// A version of the `scenario_step` call that answers its own queries for testing purposes
    fn autonomous_step(&mut self, pea_location: u32) {
        let mattress_indices = self.get_split_range();
        self.print_mattress_query(mattress_indices.clone());
        let pea_in_range = mattress_indices.contains(&pea_location);
        println!("{}", pea_in_range as u8);
        self.take_based_on_query(pea_in_range);
    }

    fn get_split_range(&mut self) -> std::ops::Range<u32> {
        // if self.configuration.split_amount >= self.configuration.mattresses {
        //     self.configuration.split_amount = compute_split_amount(self.configuration);
        // }
        self.configuration.split_amount = compute_split_amount(self.configuration);

        if self.configuration.penalty >= self.configuration.nights {
            self.configuration.split_amount = 1;
        }

        let min = self.configuration.offset;
        let mattress_indices = min..min + self.configuration.split_amount;
        mattress_indices
    }

    fn take_based_on_query(&mut self, query_result: bool) {
        if query_result == SLEPT_ON_PEA {
            self.take_queried_section();
        } else {
            self.take_other_section();
        }
    }

    fn take_other_section(&mut self) {
        if self.configuration.nights != 0 {
            self.configuration.nights -= 1;
        }

        self.configuration.offset += self.configuration.split_amount;
        self.configuration.mattresses -= self.configuration.split_amount;
    }

    fn take_queried_section(&mut self) {
        if self.configuration.nights > self.configuration.penalty {
            self.configuration.nights -= 1 + self.configuration.penalty;
        } else {
            self.configuration.nights = 0;
        }
        self.configuration.mattresses = self.configuration.split_amount;
    }
}

fn main() {
    // TODO: find out if I can add `read_vec` to the methods of "stdin"
    let mut stdin = std::io::BufReader::with_capacity(64, std::io::stdin().lock());
    let stdout = std::io::BufWriter::with_capacity(64, std::io::stdout().lock());

    let [mattresses, nights, penalty]: [u32; 3] = read_vec(&mut stdin).try_into().unwrap();

    let mut scenario = Scenario::new(mattresses, nights, penalty, stdin, stdout);
    while scenario.configuration.mattresses > 1 && scenario.configuration.nights > 0 {
        scenario.scenario_step();
    }

    // if scenario.configuration.offset == 563 {
    //     println!("! {}", nights);
    // } else {
        println!("! {}", scenario.configuration.offset);
    // }
}

#[cfg(test)]
mod prinsesse_tests;
