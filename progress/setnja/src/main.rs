/// A struct that acts as a peekable zip on peekable iterators.
/// next() returns what peek() would return without advancing the iterator unless zip would return
/// a result
struct PeekingZip<'a, 'b, I: Iterator, J: Iterator>
{
    iter_a: &'a mut std::iter::Peekable<I>,
    iter_b: &'b mut std::iter::Peekable<J>,
}

impl<'a, 'b, I: Iterator, J: Iterator> PeekingZip<'a, 'b, I, J>
{
    /// Creates a new PeekingIterator from mutable references to iterators
    fn new(iter_a: &'a mut std::iter::Peekable<I>, iter_b: &'b mut std::iter::Peekable<J>) -> Self {
        PeekingZip {
            iter_a,
            iter_b,
        }
    }
}

impl<'a, 'b, I: Iterator, J: Iterator> Iterator for PeekingZip<'a, 'b, I, J>
{
    type Item = (I::Item, J::Item);

    /// Returns the same value that peek() would return
    /// only advancing the iterator if Zip should return a value
    /// this allows continuing the iterator from the remainder without losing any values
    fn next(&mut self) -> Option<(I::Item, J::Item)> {
        // Return a copy of the peeked value if available
        let _peek_a = self.iter_a.peek()?;
        let _peek_b = self.iter_b.peek()?;

        Some((self.iter_a.next()?, self.iter_b.next()?))
    }
}

/// MediocreBigint is a bad implementation of bigint making use of smaller limbs to handle carries
/// Each digit is base 10 input or output, i.e. between 0 and 9
/// The digit capacity is 8 bits, i.e. between 0 and 255
/// the carry hides in the higher bits and get normalized back out into the digits
/// output must simply read out the digits as a string
#[derive(Debug, Clone, PartialOrd, PartialEq)]
struct MediocreBigint {
    digits: Vec<u8>
}

impl MediocreBigint {
    fn new() -> MediocreBigint {
        let segments = Vec::new();
        MediocreBigint { digits: segments }
    }

    fn is_normalized(&self) -> bool {
        self.digits.iter().fold(true, |normal, &digit| { normal && digit < 10_u8 })
    }

    fn normalize(&mut self) {
        let leftover = self.digits.iter_mut().fold(
            0,
            |carry, x| {
                let original = *x as u16;
                let carry_sum: u16 = original + carry as u16;
                let (div, modulo) = (carry_sum / 10, carry_sum % 10);
                *x = modulo as u8;
                div as u8
            });
        let (div, modulo) = (leftover / 10, leftover % 10);
        if modulo > 0 {
            self.digits.push(modulo);
        }
        if div > 0 {
            self.digits.push(div);
        }
    }
}

impl std::ops::Add for MediocreBigint {
    type Output = MediocreBigint;

    fn add(self, rhs: Self) -> Self::Output {
        let mut lhs = self;
        lhs += rhs;
        lhs
    }
}

impl std::ops::AddAssign for MediocreBigint {
    fn add_assign(&mut self, rhs: Self) {
        // Delegate to the reference implementation
        self.add_assign(&rhs);
    }
}

impl std::ops::AddAssign<&MediocreBigint> for MediocreBigint {
    fn add_assign(&mut self, rhs: &MediocreBigint) {
        let mut left_iter = self.digits.iter_mut().peekable();
        let mut right_iter = rhs.digits.iter().peekable();
        let mut carry: u16 = 0;

        for (left, right) in PeekingZip::new(&mut left_iter, &mut right_iter) {
            // Handle when we have both values
            carry += *left as u16 + *right as u16;
            let (div, modulo) = (carry / 10, carry % 10);
            *left = modulo as u8;
            carry = div;
        }

        for left in left_iter {
            // Handle leftover self values (guaranteed no rights)
            if carry == 0 {
                return;
            }
            carry += *left as u16;
            let (div, modulo) = (carry / 10, carry % 10);
            *left = modulo as u8;
            carry = div;
        }

        for right in right_iter {
            // Handle leftover rhs values (guaranteed no lefts)
            carry += *right as u16;
            let (div, modulo) = (carry / 10, carry % 10);
            self.digits.push(modulo as u8);
            carry = div;
        }

        while carry > 0 {
            let (div, modulo) = (carry / 10, carry % 10);
            self.digits.push(modulo as u8);
            carry = div;
        }
    }
}

impl std::ops::Mul for MediocreBigint {
    type Output = MediocreBigint;
    fn mul(self, rhs: Self) -> Self::Output {
        // Use the optimized MulAssign implementation
        let mut result = self.clone();
        result *= rhs;
        result
    }
}

impl std::ops::MulAssign for MediocreBigint {
    fn mul_assign(&mut self, rhs: Self) {
        // Delegate to the reference implementation
        self.mul_assign(&rhs);
    }
}

impl std::ops::MulAssign<&MediocreBigint> for MediocreBigint {
    fn mul_assign(&mut self, rhs: &MediocreBigint) {
        // Handle empty cases
        if self.digits.is_empty() || rhs.digits.is_empty() {
            self.digits.clear();
            return;
        }
        
        // Special case for single digit multiplication to avoid unnecessary allocations
        if rhs.digits.len() == 1 && rhs.digits[0] < 10 {
            let r_digit = rhs.digits[0];
            if r_digit == 0 {
                self.digits.clear();
                return;
            }
            if r_digit == 1 {
                return; // Identity
            }
            
            let mut carry = 0u16;
            // Multiply in place
            for digit in &mut self.digits {
                let product = (*digit as u16) * (r_digit as u16) + carry;
                let (div, modulo) = (product / 10, product % 10);
                *digit = modulo as u8;
                carry = div;
            }
            
            // Handle any remaining carry
            while carry > 0 {
                let (div, modulo) = (carry / 10, carry % 10);
                self.digits.push(modulo as u8);
                carry = div;
            }
            return;
        }
        
        // For general case, we need a separate result vector
        // Store original digits and clear self to reuse it
        let original_digits = std::mem::take(&mut self.digits);
        let original_self = MediocreBigint { digits: original_digits };
        
        // Pre-allocate result with enough capacity for the worst case
        let mut result = MediocreBigint::new();
        result.digits.reserve(original_self.digits.len() + rhs.digits.len() + 1);
        
        // For each digit in rhs, multiply it with all digits in original_self
        for (i, &r_digit) in rhs.digits.iter().enumerate() {
            // Skip multiplication by zero
            if r_digit == 0 {
                continue;
            }
            
            let mut partial_result = Vec::with_capacity(i + original_self.digits.len() + 2);
            
            // Add zeros for the shift based on position
            partial_result.extend(std::iter::repeat(0).take(i));
            
            let mut carry = 0u16;
            
            // Multiply each digit of original_self by the current digit of rhs
            for &l_digit in original_self.digits.iter() {
                let product = (l_digit as u16) * (r_digit as u16) + carry;
                let (div, modulo) = (product / 10, product % 10);
                partial_result.push(modulo as u8);
                carry = div;
            }
            
            // Handle any remaining carry
            while carry > 0 {
                let (div, modulo) = (carry / 10, carry % 10);
                partial_result.push(modulo as u8);
                carry = div;
            }
            
            // Create partial_bigint without cloning
            let partial_bigint = MediocreBigint { digits: partial_result };
            
            // Add this partial result to the total
            result += partial_bigint;
        }
        
        // Move the result back into self
        self.digits = result.digits;
    }
}

impl std::fmt::Display for MediocreBigint {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        assert_eq!(self.is_normalized(), true);

        // Read digit by digit and write out char by char
        if self.digits.len() > 0 {
            self.digits.iter().rev().map(ToString::to_string).collect::<String>().fmt(f)
        } else {
            0u8.fmt(f)
        }
    }
}

impl std::str::FromStr for MediocreBigint {
    type Err = std::num::ParseIntError;
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        // Read char by char and write out digit by digit
        let mut segments = if s.len() > 0 {
            Vec::with_capacity(s.len())
        } else {
            Vec::new()
        };

        for char in s.chars() {
            segments.push(u8::from_str_radix(&char.to_string(), 10)?);
        }
        segments.reverse();
        Ok(MediocreBigint { digits: segments })
    }
}

fn read_str() -> String {
    let mut response = String::new();
    std::io::stdin()
        .read_line(&mut response)
        .expect("Failed to get input");
    response.trim_end().to_string()
}

fn solve(walk: &str) -> String {
    use std::str::FromStr;

    let mut accumulator = MediocreBigint::from_str("1").unwrap();
    let mut multiplexor : MediocreBigint = accumulator.clone();

    let five = MediocreBigint::from_str("5").unwrap();
    let three = MediocreBigint::from_str("3").unwrap();
    let two = MediocreBigint::from_str("2").unwrap();
    for step in walk.chars() {
        match step {
            '*' => {
                accumulator *= &five;
                accumulator += &multiplexor;
                multiplexor *= &three;
            }
            'P' => { }
            'L' => {
                accumulator *= &two
            }
            'R' => {
                accumulator *= &two;
                accumulator += &multiplexor;
            }
            _ => panic!("This should not happen"),
        }
    }
    accumulator.normalize();
    accumulator.to_string()
}

fn main() {
    let walk = read_str();
    println!("{}", solve(walk.as_str()));
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_solve_ten_grand_star() {
        assert_eq!(solve("*".repeat(10000).as_str()), "751855912380967801394633390061446662398235167200763875913214356341885929642617606028366604437263362004228277392930875581219911647653369095247232534321936717788113136667409184340773167603160022006603289121537436843582444568591134871034093477185632902318592569642158822888313662303905599885935250117546236710913670398060792998913463492832275383728714680192723097394123632071170681226258183300524784559883559696557962997263019507634315809082241346754853056754013654805988057914893028334152409985529207112545763257843881742997708534647311596984884912858262285360415865028236090204289728865480618598704538143034209729178350457685585155032100360892328577787540449417799652208344580216048436179265245454718435498633244540653399235485475858769538352352220557354624665667451085473217761464664563908705328217813527242643147270338398073292535829978185575638478838693391757440613567403052239281985667715526612666418213272731510157115993838777464991499888587588560739983697122774251546309596410673260123683797191641423754081832187078520564360833558557965960628372227649088448860850816563736433837665083071556358179233174203205881811114620539432631572185363008613260469345910779475709874711833241061593233079557358187288902350478437819046874898036147181309242132784068878554143293734454999605723515417616909901933767960551634443452540012729995712985194418972650972431342188118528904668827886141508161366166440696147213647196644948724258153846862032165965840759650875020675660256504612608957168220471123294459419434894614012887305038388166667134192728785326217316122453863793000445367852956986164535198416366552106913264869631748739842538091579195365406871248298647413104443735903776289404434751664316345310725514397061816902595792814485431032675840286153818488952016308174615097914652146846567829672600061912903684253456540375039704238469664515034596322490984034752240212377601954811531616865074668535463402686949082196707237104533466206347245892793177565356351818599659455888294506646764027580164187692973361444963656024145601287418296828473481811621248515564450067324784882980397613178250766028133475650447954814643912671800998530366210014062687987490772208448001553492812262478882481088560806927588213062226338418288685790961813140423845344683665635047514986016587196500355797329594729784458990912094304232824157988714998969904210010852197073940725069313709001309494801583982659986129137586780285629933032532396703800371729762664657283257880621556854359461334343902796842930593586145070238476857943602230431926616079881649939935991314067431649003172144590365376364508858795279807274397474232317313623547497803492958911710477613061247218439997669362573446539318423342175875267790334274477116343419257406789339787795898857087776889320441857546702585729998814154088811968317892097248956354874633666422158421788076038571218891593129959016470023739880520203140223755991557485879450871615695873324010602371830188012781253710378122561282614719541174872381911029803681022916365890005672516943697361023335420870682327021386992910311943173134511326519423569831880528054416198662871373302821562706548534272428688830481517836870468128296710920375020600750376682195135974565674825894177188123244474719231436999757312285953113506377458919689488698726269140131424878688724655224912609725416007342137539871497019327782326867384639087130154308265758496724820863045600146419847776774802845467094764953114124945652278895849655646144418281602880317671211457002217638221633137761268576365049561822360638418201939707286850566382042741824930578018969135087595194323399316645300127890927809399159262546574572607198812820836992067718807586090392489451803166229548996238467654904631488524605302261687800863775923897904992568334299052773586181720168021542723828497133315687991827395623646937853016172570121177856270562190001362343043797013547600427716075912509337376181534731763002898516721134207967592889217109398021256926864947435081186672190162712183750281761297163253883334914407696822962558303617745049761675794458798945732842750638506765526948132641816918633765525070185758623416159027100509869945066091214947677307726676342996744897630691217085847925949523488683159999841068645828789178776084359446368866275397645306359675929138203877578394503182774590492680354866158776273368094917202560584428527770937079379649051524419989267097451364378398015848568893442283484109927119280576192796736556600528080965309017455716465969456281063967632109301838167949951394146911009205178253277049707607326332912464922115312885016780717226951152850976683233088743978870912633363894210558212100484587039709260047133523567478219673515188514809964734451491140725644643486442602330327880575625093234914498212917134739982133560730647862631427687310682825020722025468180128413152001046430323513977760850602349968686577908442774329275309124172250297886920136040295314100617517110832261653012812225528919912022873607168544049956574191842520270350486138399902683065655258178730536413230846631519711527338519775596129140684902551357119854727254257811960185027838960676209972220464029298629497145642209021081906515949204766147609199743308867992800822849444520785328770086683762901305807973762144014547438781284470948288430511060767908536846421393304807930900134617300730559888862181733241015777481578658550328759126049136369713658046834882501000106522311018189588438434935396152259905601026388864398582339381351856669431977354687550801321845478027134979749410464988018497683084419949123420385849915987148395073810401645161347811711182591908386549170184489359024447352140587619370560868622109838679516735081000582063359965795326124813281182432137853217982678798899575707098854253183996801577240582197789755342145274532723448688216227040186349005776571403400677033320995548621162632454834924067183116881807063216102373290521861695838297123388215943958558768895738258828889671895533800571945081747308366809398665110956069224458649587762298588379566857628473764600642132752116390461383773606952180395671828069400191761553401726413889074969113236260183930753112568287048079318833921792610113839452470260353753449920188939279899368188928072687683345045219094038475744457152254450213462317370797507034498652292087789709256727633131472856395887317727536484835839673307333160289582129536202979585591945990572163125740758677198577266415808755284533920962733533158816950860605393780121572760337513836472661985177604622406091130288542324855491684405804465809445195324769615309565635961281403802236125791863748770697460037000175941113825303206495448066543974725161219017706088075549306555010811460655899170638950824918550927155688063600621584765926424209987545033485719712027918837757316004906688321872416973570923947198251838226398558095899649994977789433129600529809308832509846574699646895042338319172695407873553641755442304187208977870432489532346206157133243059337205619447635005735040395948440820541599967030862405706296275866746635805069767029351948148228191768764087809466717399192641321912745144450215483541827527417570540170293468210204307000605735937");
    }

    #[test]
    fn test_solve_maximal_star() {
        assert_eq!(solve("*".repeat(30000).as_str()), "");
    }

    #[test]
    fn test_solve_middle_star() {
        assert_eq!(solve("P*P"), "6");
    }

    #[test]
    fn test_solve_repeated_alternating() {
        assert_eq!(solve("LLLLLRRRRRLLLLLRRRRRLLLLLRRRRRLLLLL"), "35400942560");
    }

    #[test]
    fn test_solve_left_star() {
        assert_eq!(solve("L*"), "11");
    }

    #[test]
    fn test_solve_right_star() {
        assert_eq!(solve("R*"), "16");
    }

    #[test]
    fn test_solve_double_star() {
        assert_eq!(solve("**"), "33");
    }

    #[test]
    fn test_solve_right_star_right() {
        assert_eq!(solve("R*R"), "35");
    }

    #[test]
    fn test_solve_left_star_right() {
        assert_eq!(solve("L*R"), "25");
    }

    #[test]
    fn test_add_zero() {
        let a = MediocreBigint { digits: vec![1, 0, 0, 1, 1] };
        let zero = MediocreBigint::new();
        assert_eq!(zero.to_string(), "0");
        let c = a.clone() + zero.clone();
        assert_eq!(c, a);

        let d = zero + a.clone();
        assert_eq!(d, a);
    }
    
    #[test]
    fn test_mul_zero() {
        let a = MediocreBigint { digits: vec![1, 0, 0, 1, 1] };
        let zero = MediocreBigint::new();
        assert_eq!(zero.to_string(), "0");
        let c = a.clone() * zero.clone();
        assert_eq!(c.to_string(), "0");

        let d = zero.clone() * a.clone();
        assert_eq!(d.to_string(), "0");
    }
    
    #[test]
    fn test_mul_small() {
        let a = MediocreBigint { digits: vec![2] };
        let b = MediocreBigint { digits: vec![3] };
        let c = a * b;
        assert_eq!(c.digits, vec![6]);
    }
    
    #[test]
    fn test_mul_carry() {
        let a = MediocreBigint { digits: vec![7] };
        let b = MediocreBigint { digits: vec![8] };
        let c = a * b;
        assert_eq!(c.digits, vec![6, 5]);
    }
    
    #[test]
    fn test_mul_larger() {
        use std::str::FromStr;
        let a = MediocreBigint::from_str("123").unwrap();
        let b = MediocreBigint::from_str("456").unwrap();
        let c = a * b;
        assert_eq!(c, MediocreBigint::from_str("56088").unwrap());
    }

    #[test]
    fn test_add_small() {
        let a = MediocreBigint { digits: vec![2] };
        let b = MediocreBigint { digits: vec![2] };
        let c = a.clone() + b;
        assert_eq!(c.digits, vec![4]);
    }

    #[test]
    fn test_add_big() {
        let a = MediocreBigint { digits: vec![2] };
        let b = MediocreBigint { digits: vec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2] };
        let c = a.clone() + b;
        assert_eq!(c.digits, vec![2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2]);
    }

    #[test]
    fn test_add_carry() {
        let a = MediocreBigint::from_str("1776").unwrap();
        let b = MediocreBigint::from_str("76").unwrap();
        let mut c = a + b;
        c.normalize();
        use std::str::FromStr;
        assert_eq!(c, MediocreBigint::from_str(&(1776 + 76).to_string()).unwrap());
    }

    #[test]
    fn test_add_mega_denorm() {
        let a = MediocreBigint { digits: vec![255] };
        let mut b = a.clone();
        b.normalize();
        assert_eq!(a.digits, vec![255]);
        assert_eq!(b.digits, vec![5, 5, 2]);

        let mut c = a.clone() + a.clone();
        let mut d = a.clone() + b.clone();
        let mut e = b.clone() + b.clone();

        c.normalize();
        d.normalize();
        e.normalize();
        assert_eq!(c, d);
        assert_eq!(d, e);
    }

    #[test]
    fn test_create() {
        let int = MediocreBigint::new();
        assert_eq!(int.digits.len(), 0);
    }

    #[test]
    fn test_empty_is_zero() {
        let int = MediocreBigint::new();
        assert_eq!(int.to_string(), "0");
    }

    #[test]
    fn test_is_normalized() {
        let a = MediocreBigint { digits: vec![] };
        let b = MediocreBigint { digits: vec![2, 1, 1] };
        let c = MediocreBigint { digits: vec![0, 0, 1, 20]};
        assert!(a.is_normalized());
        assert!(b.is_normalized());
        assert_eq!(c.is_normalized(), false);
    }

    #[test]
    fn test_clone() {
        let a = MediocreBigint { digits: vec![1, 1, 1, 2, 1] };
        let mut b = a.clone();
        assert_eq!(a, b);
        b.digits[0] = 2;
        assert_ne!(a, b);
    }

    #[test]
    fn test_normalize() {
        let mut a = MediocreBigint { digits: vec![1, 10, 1, 1, 1] };
        let b = a.clone();
        assert_eq!(a, b);
        a.normalize();
        assert_ne!(a, b);
        assert!(a.is_normalized());
        assert!(a.digits.eq(&vec![1, 0, 2, 1, 1]));
    }

    #[test]
    fn test_normalize_zero() {
        let mut a = MediocreBigint { digits: vec![] };
        a.normalize();
        assert_eq!(a.digits, vec![]);
    }

    #[test]
    fn test_normalize_create_digit() {
        let mut a = MediocreBigint { digits: vec![10] };
        a.normalize();
        assert_eq!(a.digits, vec![0, 1]);
    }
}
